"""Add tables

Revision ID: ff058a741286
Revises:
Create Date: 2024-02-08 13:32:04.036549

"""

from collections.abc import Sequence
from typing import Union

import geoalchemy2
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "ff058a741286"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.execute("CREATE SCHEMA IF NOT EXISTS alertswisscap")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "cap_alerts",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("reference", sa.String(), nullable=False),
        sa.Column("cap_id", sa.String(), nullable=False),
        sa.Column("cap_sender", sa.String(), nullable=False),
        sa.Column("cap_sent", sa.DateTime(), nullable=False),
        sa.Column("cap_status", sa.String(), nullable=False),
        sa.Column("cap_message_type", sa.String(), nullable=False),
        sa.Column("cap_scope", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="alertswisscap",
    )
    op.create_table(
        "cap_circles",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="POINT", srid=4326, from_text="ST_GeomFromEWKT", name="geometry"
            ),
            nullable=True,
        ),
        sa.Column("radius", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="alertswisscap",
    )
    # op.create_index('idx_cap_circles_geom', 'cap_circles', ['geom'], unique=False, schema='alertswisscap', postgresql_using='gist')
    op.create_table(
        "cap_linestrings",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTILINESTRING", srid=4326, from_text="ST_GeomFromEWKT", name="geometry"
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alertswisscap",
    )
    # op.create_index('idx_cap_linestrings_geom', 'cap_linestrings', ['geom'], unique=False, schema='alertswisscap', postgresql_using='gist')
    op.create_table(
        "cap_polygons",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON", srid=4326, from_text="ST_GeomFromEWKT", name="geometry"
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alertswisscap",
    )
    # op.create_index('idx_cap_polygons_geom', 'cap_polygons', ['geom'], unique=False, schema='alertswisscap', postgresql_using='gist')
    op.create_table(
        "cap_areas",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("cap_circle_id", sa.Integer(), nullable=True),
        sa.Column("cap_polygon_id", sa.Integer(), nullable=True),
        sa.Column("cap_linestring_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["cap_circle_id"],
            ["alertswisscap.cap_circles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["cap_linestring_id"],
            ["alertswisscap.cap_linestrings.id"],
        ),
        sa.ForeignKeyConstraint(
            ["cap_polygon_id"],
            ["alertswisscap.cap_polygons.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alertswisscap",
    )
    op.create_table(
        "cap_info",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("cap_language", sa.String(), nullable=False),
        sa.Column("cap_category", sa.String(), nullable=True),
        sa.Column("cap_event", sa.String(), nullable=True),
        sa.Column("cap_urgency", sa.String(), nullable=True),
        sa.Column("cap_severity", sa.String(), nullable=True),
        sa.Column("cap_certainty", sa.String(), nullable=True),
        sa.Column("cap_onset", sa.DateTime(), nullable=True),
        sa.Column("cap_sender_name", sa.String(), nullable=True),
        sa.Column("cap_headline", sa.String(), nullable=True),
        sa.Column("cap_description", sa.String(), nullable=True),
        sa.Column("cap_instruction", sa.String(), nullable=True),
        sa.Column("cap_contact", sa.String(), nullable=True),
        sa.Column("cap_alert_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["cap_alert_id"],
            ["alertswisscap.cap_alerts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alertswisscap",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("cap_info", schema="alertswisscap")
    op.drop_table("cap_areas", schema="alertswisscap")
    op.drop_index(
        "idx_cap_polygons_geom", table_name="cap_polygons", schema="alertswisscap", postgresql_using="gist"
    )
    op.drop_table("cap_polygons", schema="alertswisscap")
    op.drop_index(
        "idx_cap_linestrings_geom",
        table_name="cap_linestrings",
        schema="alertswisscap",
        postgresql_using="gist",
    )
    op.drop_table("cap_linestrings", schema="alertswisscap")
    op.drop_index(
        "idx_cap_circles_geom", table_name="cap_circles", schema="alertswisscap", postgresql_using="gist"
    )
    op.drop_table("cap_circles", schema="alertswisscap")
    op.drop_table("cap_alerts", schema="alertswisscap")
    # ### end Alembic commands ###
    op.execute("DROP SCHEMA IF EXISTS alertswisscap")
