"""add shapes

Revision ID: 16786c02b33a
Revises: cc756c5eec19
Create Date: 2023-11-23 15:12:53.776438

"""

from collections.abc import Sequence
from typing import Union

import geoalchemy2
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "16786c02b33a"
down_revision: Union[str, None] = "cc756c5eec19"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "cap_circles",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("radius", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    # op.create_index('idx_cap_circles_geom', 'cap_circles', ['geom'], unique=False, postgresql_using='gist')
    op.create_table(
        "cap_linestrings",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTILINESTRING",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # op.create_index('idx_cap_linestrings_geom', 'cap_linestrings', ['geom'], unique=False, postgresql_using='gist')
    op.create_table(
        "cap_polygons",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # op.create_index('idx_cap_polygons_geom', 'cap_polygons', ['geom'], unique=False, postgresql_using='gist')
    op.add_column("cap_areas", sa.Column("cap_circle_id", sa.Integer(), nullable=True))
    op.add_column("cap_areas", sa.Column("cap_polygon_id", sa.Integer(), nullable=True))
    op.add_column("cap_areas", sa.Column("cap_linestring_id", sa.Integer(), nullable=True))
    op.create_foreign_key(None, "cap_areas", "cap_circles", ["cap_circle_id"], ["id"])
    op.create_foreign_key(None, "cap_areas", "cap_linestrings", ["cap_linestring_id"], ["id"])
    op.create_foreign_key(None, "cap_areas", "cap_polygons", ["cap_polygon_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "cap_areas", type_="foreignkey")
    op.drop_constraint(None, "cap_areas", type_="foreignkey")
    op.drop_constraint(None, "cap_areas", type_="foreignkey")
    op.drop_column("cap_areas", "cap_linestring_id")
    op.drop_column("cap_areas", "cap_polygon_id")
    op.drop_column("cap_areas", "cap_circle_id")
    op.drop_index("idx_cap_polygons_geom", table_name="cap_polygons", postgresql_using="gist")
    op.drop_table("cap_polygons")
    op.drop_index(
        "idx_cap_linestrings_geom",
        table_name="cap_linestrings",
        postgresql_using="gist",
    )
    op.drop_table("cap_linestrings")
    op.drop_index("idx_cap_circles_geom", table_name="cap_circles", postgresql_using="gist")
    op.drop_table("cap_circles")
    # ### end Alembic commands ###
